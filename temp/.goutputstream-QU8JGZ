// Convex Hull
// Jarvis's Algo
// Complexity : n^2

#include <bits/stdc++.h>
#define x first
#define y second
using namespace std;
typedef pair<int, int> pii;


int orentation(pii p, pii q, pii r) {       // returns orientation of r w.r.t. pq
    

vector<int>hull;

bool convexHull(vector<pii>&v) {
    if(v.size() < 3)
        return 0;
    
    // Find leftMost point
    int l = 0;
    for(int i = 1; i < (int)v.size(); ++i)
        if(v[i].x < v[l].x)
            l = i;
    
    
    int p = l, q;
    printf("Starting %d %d\n", v[l].x, v[l].y);
    
    do {
        hull.push_back(p);
        
        int t = 1;
        while(1) {
            q = (p+t) %v .size();
            if(v[q] != v[p])
                break;
            ++t;
        }
            
        for(int i = 0; i < (int)v.size(); ++i)              // If i is more counterclockwise than current q, then update q
            if(orientation(v[p], v[i], v[q]) == 2)          // iq line is rightmost of pi
                if(v[p] != v[i])                            // Ignore same points
                    q = i;
                    
        printf("%d %d -->> %d %d\n", v[p].x, v[p].y, v[q].x, v[q].y);
        p = q;
        
        getchar();
    }while(p != l);
    
    cout << "DONE--------------\n";
    
    for(auto P : hull)
        cout << v[P].x << " " << v[P].y << endl;
    
    cout << "END--------\n";
    
    return 1;
}

int main() {
    //vector<pii>points = {{0, 3}, {2, 2}, {1, 1}, {2, 1}, {3, 0}, {0, 0}, {3, 3}, {3, 3}, {3, 2}, {1, 2}};
    
    vector<pii>points = {{2, 2}, {3, 2}, {2, 1}, {1, 1}, {1, 2}, {3, 3}};
    
    /*scanf("%d", &n);
    
    for(int i = 0; i < n; ++i) {
        scanf("%d%d", &x, &y);
        points.push_back({x, y});
    }*/
    
    //convexHull(points);
    
    vector<vector<int> >ansVec(1010);
    map<pii, vector<int> >Map;
    
    int idx = 0;
    for(auto it : points)
        Map[it].push_back(idx++);
    
    idx = 0;
    while(1) {
        convexHull(points);
        
        if(hull.empty())
            break;
        
        sort(hull.begin(), hull.end(), greater<int>());
        
        for(auto id : hull) {
            ansVec[idx].push_back(Map[points[id]].back());
            Map[points[id]].pop_back();
        }
        
        for(auto p : hull)
            points.erase(points.begin()+p);
        
        hull.clear();
        
        for(auto p : points)
            cout << p.x << " " << p.y << endl;
            
        ++idx;
    }
    
    
    printf("%d\n", idx);
    
    for(int i = 0; i < idx; ++i) {
        printf("%d", ansVec[i].size());
        for(int j = 0; j < (int)ansVec[i].size(); ++j)
            printf(" %d", ansVec[i][j]);
        printf("\n");
    }
    
    return 0;
}
