#include <bits/stdc++.h>
using namespace std;

vector<int>g[110], answer, temp_answer;
bitset<110>color, visited;

void backtrack(int u, bool color_code)
{
	bool ok = 1;
	visited[u] = 1;
	for(int i = 0; i < (int)g[u].size(); i++) {
		int v = g[u][i];
		if(color[v] == color_code)
			ok = 0;
	}
	if(ok) {
		color[u] = color_code;
		temp_answer.push_back(u);
	}
	//printf("visiting %d\n", u);
	for(int i = 0; i < (int)g[u].size(); i++) {
		int v = g[u][i];
		if(!visited[v])
			backtrack(v, color_code);
	}
}


int main()
{
	freopen("in", "r", stdin);
	freopen("out", "w", stdout);
	register int t, u, v, V, E;
	scanf("%d", &t);
	while(t--) {
		scanf("%d %d", &V ,&E);
		for(register int i = 0; i < E; i++) {
			scanf("%d %d", &u, &v);
			g[u].push_back(v);
			g[v].push_back(u);
		}
		for(register int j = 1; j <= V; j++) {
			color.set();
			visited.reset();
			backtrack(j, 0);
			if(temp_answer.size() > answer.size())
				answer = temp_answer;
		}
		printf("%d\n", (int)answer.size());
		for(int i = 0; i < (int)answer.size() - 1; i++)
			printf("%d ", answer[i]);
		printf("%d\n", answer[answer.size()-1]);
	}
	return 0;
}
