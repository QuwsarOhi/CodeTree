#include <bits/stdc++.h>
#define MAX 1000
using namespace std;

int t[MAX], d[MAX], f[MAX], n;
int dp[30][MAX];

// 10, 3
// 10, 7, 4, 1
// 10, 8, 6, 4, 2

int cal(int pos, int &Time, int takes) {
    int tmp = f[pos], ret = 0;
    for(int i = 5; i <= takes && tmp != 0; i+=5) {
        Time -= 5;
        if(Time < 0)
            return ret;
        ret += tmp;
        tmp -= d[pos];
    }
    
    return ret;
}

int recur(int pos, int Time) {
    if(pos == n || Time == 0)
        return 0;
    int &ret = dp[pos][Time];
    
    if(ret != -1) {
        cout << "HIT " << pos << " " << Time << endl;
        getchar();
        return ret;
    }

    ret = recur(pos+1, Time);
    
    for(int i = 5; ; i+=5) {
        int tTime = Time;
        int cost = cal(pos, tTime, i);
        tTime -= t[pos];
        
        if(tTime < 0 || cost <= 0) break;
        cout << "Taken " << cost << " " << tTime << " " << i << endl;
        ret = max(ret, recur(pos+1, tTime)+cost);
    }
    
    return ret;
}

int main() {
    int tc, h;
    scanf("%d", &tc);
    
    for(int Case = 1; Case <= tc; ++Case) {
        scanf("%d%d", &n, &h);
        h *= 60;
        
        for(int i = 0; i < n; ++i)
            scanf("%d", &f[i]);
        
        for(int i = 0; i < n; ++i)
            scanf("%d", &d[i]);
        
        memset(t, 0, sizeof t);
        for(int i = 0; i < n-1; ++i) {
            scanf("%d", &t[i]);
            t[i] *= 5;
        }
        
        memset(dp, -1, sizeof dp);
        printf("Number of fish expected: %d\n", recur(0, h));
    }
    return 0;
}
