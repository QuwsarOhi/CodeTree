#include <bits/stdc++.h>
using namespace std;
#define MAX                 13333333
#define EPS                 1e-9
#define INF                 1e7
#define MOD                 1000000007
#define pb                  push_back
#define mp                  make_pair
#define fi                  first
#define se                  second
#define pi                  acos(-1)
#define sf                  scanf
#define pf                  printf
#define SIZE(a)             ((int)a.size())
#define All(S)              S.begin(), S.end()              
#define Equal(a, b)         (abs(a-b) < EPS)
#define Greater(a, b)       (a >= (b+EPS))
#define GreaterEqual(a, b)  (a > (b-EPS))
#define fr(i, a, b)         for(register int i = (a); i < (int)(b); i++)
#define FastRead            ios_base::sync_with_stdio(false); cin.tie(NULL);
#define fileRead(S)         freopen(S, "r", stdin);
#define fileWrite(S)        freopen(S, "w", stdout);
#define Unique(X)           X.erase(unique(X.begin(), X.end()), X.end())

#define isOn(S, j)          (S & (1 << j))
#define setBit(S, j)        (S |= (1 << j))
#define clearBit(S, j)      (S &= ~(1 << j))
#define toggleBit(S, j)     (S ^= (1 << j))
#define lowBit(S)           (S & (-S))
#define setAll(S, n)        (S = (1 << n) - 1)

typedef unsigned long long ull;
typedef long long ll;
typedef map<int, int> mii;
typedef map<ll, ll>mll;
typedef map<string, int> msi;
typedef vector<int> vi;
typedef vector<long long>vl;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;
typedef vector<pair<int, int> > vii;
typedef vector<pair<ll, ll> >vll;


//int dx[] = {-1, 0, 1, 0}, dy[] = {0, 1, 0, -1};
//int dx[] = {-1, -1, -1, 0, 0, 1, 1, 1}, dy[] = {-1, 0, 1, -1, 1, -1, 0, 1};
//----------------------------------------------------------------------------------------------------------

vector<ll>ret;                          // returns : ret[number_of_overlaps] = total_number_of_points

void CountInterval(int n) {                       // returns number of overlaps of all inclusive points
    vector<pair<ll, int> >v;                            // segments start/end and marker (segments are l - r inclusive)
    ll l, r;
    while(n--) {
        scanf("%lld%lld", &l, &r);
        v.push_back({l, 1}), v.push_back({r+1, -1});    // r+1 as l - r is segment boundary
    }
    sort(v.begin(), v.end());
    for(int i = 0, cnt = v[0].second; i < (int)v.size(); ++i, cnt += v[i].second)       // cnt contains the overlaps
        if(i+1 < (int)v.size() and v[i].first != v[i+1].first) {                          // v[i].first == v[i+1].first then 
            ret[cnt] = min(ll(v[i+1].first - v[i].first), ret[cnt]);                      // there may exist more points at front, so take them first
            cout << "CNT " << cnt << " " << v[i+1].first << " " <<  v[i].first << endl;
        }
}


int main() {
    int t, n, m;
    scanf("%d", &t);
    
    for(int Case = 1; Case <= t; ++Case) {
        scanf("%d%d", &n, &m);
        
        ret.clear();
        ret.resize(n+1, INF);
        
        CountInterval(n);
        
        ll ans = INF;
        for(int i = m; i < n; ++i)
            ans = min(ans, ret[i]);
        
        cout << ans << endl;
    }
    return 0;
}
